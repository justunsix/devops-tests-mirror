# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  ############################################################
  # VirtualBox Hypervisor Configuration
  ############################################################

  config.vm.define "k8stest", primary: true do |k8stest|
    k8stest.vm.box = "ubuntu/jammy64"

    k8stest.vm.provider :virtualbox do |vb|
      vb.name = "k8stest"
      # Allocate memory from 1 GB default to 2 GB
      vb.memory = "2048"
    end

    # Open microk8s's Kubernetes API server port to host
    config.vm.network "forwarded_port", guest: 16443, host: 16443
  end

  ############################################################
  # Provisioners
  ############################################################

  config.vm.provision "shell", privileged: true, inline: <<-SHELL
    echo -e "-- Updating system"
    apt-get update
    apt-get upgrade -y
    echo -e "-- Installing tools"
    apt install git -y

    echo -e "-- Installing Kubernetes tools"
    snap install kubectx --classic
    # k9s install workaround until this works without CLI issues 'snap install k9s --devmode'
    # https://github.com/derailed/k9s/issues/2128
    wget https://github.com/derailed/k9s/releases/download/v0.32.7/k9s_linux_amd64.deb && apt install ./k9s_linux_amd64.deb && rm k9s_linux_amd64.deb
    snap install microk8s --classic
    usermod -a -G microk8s vagrant
    echo -e "-- Starting microk8s, please wait, this may take some time..."
    microk8s status --wait-ready
  SHELL
 
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    echo -e "-- Setting up user's k8s config"

    # Output microk8s kubeconfig to user's config for use
    # with other programs
    mkdir -p ~/.kube
    chmod 0700 ~/.kube
    sudo microk8s kubectl config view --raw > ~/.kube/config
    echo -e "-- kubeconfig set up"

    # Aliases for convenience
    echo 'alias kubectl="microk8s kubectl"' >>/home/vagrant/.bashrc
    echo 'alias k="kubectl"' >>/home/vagrant/.bashrc

  SHELL

  # Run script to install k3s Kubernetes distribution 
  # config.vm.provision "k8s-setup", type: "shell", privileged: false, path: "setup-k3s.sh"

  # Optional provisions to use nix to install programs
  # config.vm.provision "nix-setup", type: "shell", privileged: false, path: "provisioners/setup-nix.sh"
  # config.vm.provision "tools-setup", type: "shell", privileged: false, path: "provisioners/setup-nix-tools.sh"
  
  config.vm.provision "docker"

end
